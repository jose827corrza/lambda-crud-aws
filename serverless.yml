service: serverless-dynamodb-crud
# plugins:
#   - serverless-offline
#   - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: !GetAtt usersTable.Arn # Creates a ref to the ARN of the Resource created below
          # Resource: arn:aws:dynamodb:us-east-1:164190131261:table/usersTable-TEST

package: 
  individually: true
  patterns:
    - "!*/**"

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
  config:
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'us-east-1'}

functions:
  get-users:
    handler: getUsers/handler.getUsers
    package:
      patterns:
        - "getUsers/handler.js"
    events:
      - http:
          path: /users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-users:
    handler: createUsers/handler.createUsers
    package:
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: /users
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-users:
    handler: updateUsers/handler.updateUsers
    package:
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: /users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  hello-users:
    handler: hello/handler.hello
    package:
      patterns:
        - "hello/handler.js"
    events:
      - http:
          path: /
          method: GET
  delete-users:
    handler: deleteUsers/handler.deleteUsers
    runtime: python3.8
    package:
      patterns:
        - "deleteUsers/handler.py"
    events:
      - http:
          path: /users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        # AccessControl: PublicRead # removed due to an error deploying
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
        BucketName: !Sub "s3-bucket-user-crud-${AWS::AccountId}-${self:custom.config.region}"
    Se3Policy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal: '*'


